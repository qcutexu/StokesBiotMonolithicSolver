//verbosity = 0;
macro cdot(ax,ay,bx,by) (ax*bx+ay*by)//
macro div(ax,ay) (dx(ax)+dy(ay))//
macro sym(u1,u2,v1,v2) ( dx(u1)*dx(v1) + 0.5*(dx(u2)+dy(u1))*(dx(v2)+dy(v1)) + dy(u2)*dy(v2))//
macro gugv(u1,u2,v1,v2) ( dx(u1)*dx(v1) + dy(u1)*dy(v1)+dx(u2)*dx(v2) + dy(u2)*dy(v2))//

include "SaveVTK2d.edp";
include "definePhiTree.edp";
load "MUMPS_FreeFem"
//export TMPDIR=/tmp

mesh Th=readmesh("./input/mesh_final_tree.am_fmt");  


// FE SPACES
fespace Fh(Th,P1);  
fespace Ph(Th,P2);
Fh ux,uy,p,vx,vy,q;   
Fh pplot,diff, tang, creac, coldp, cproj;
Ph c, s, cold;

fespace PlotFh(Th,[P1,P1]);  
PlotFh [plotux,plotuy], [plotex,plotey];

fespace Pph(Th,P1);  
Pph pp, psip, ppold;
 
Pph pDplot;
Pph qx,qy,phiplot,phiold, uxtot, uytot, ptot, rx, ry;

fespace Dplot(Th,[P1,P1]);  
Dplot [plotqx,plotqy];


real T=500;
real dt=5e-2, t=0;
real NN=T/dt;
int br=1, pr=50;

real penalty=1e+10;

real cfIn=2e-7, diffF=3e-5, diffP=1.3e-5;
real rmax=-3.4e-8, cmm=1e-10, ccr=1e-9;

fespace PwcF(Th,P0);
PwcF hhhhF=hTriangle;
real hminF=hhhhF[].min;
real hdirF=hminF;

real eps=hdirF;  
//cout<<eps<<endl;
real delta=1e-3;

string files="./treeFlow/";
string where="./treeTransport/";

func real[int] heavyside(real[int] c1, real c2, int size){
	real[int] HS(size);
	for(int i=0; i<size; i++){
		if(c1[i]>c2){
			HS[i]=1;
			}
		else HS[i]=0;
	}
	return HS;
}


		
{
	ifstream file1("./input/pffFinal.txt");   
	file1 >> phiplot[];
}

diff=diffF*phiplot+diffP*(1.0-phiplot);

phiold=phiplot;
//phiplot=(1.0-2*delta)*phiold+delta;

/* 
problem transport(c,s) = 
int2d(Th)(1.0/dt*c*s)
-int2d(Th)(1.0/dt*cold*s)
-int2d(Th)(0.5*c*(ux*dx(s)+uy*dy(s))*phiplot)
-int2d(Th)(0.5*c*(qx*dx(s)+qy*dy(s))*(1-phiplot))
-int2d(Th)(0.5*cold*(ux*dx(s)+uy*dy(s))*phiplot)
-int2d(Th)(0.5*cold*(qx*dx(s)+qy*dy(s))*(1-phiplot))
+int2d(Th)(0.5*diffF*(dx(c)*dx(s)+dy(c)*dy(s))*phiplot)
+int2d(Th)(0.5*diffF*(dx(cold)*dx(s)+dy(cold)*dy(s))*phiplot)
+int2d(Th)(0.5*diffP*(dx(c)*dx(s)+dy(c)*dy(s))*(1.0-phiplot))
+int2d(Th)(0.5*diffP*(dx(cold)*dx(s)+dy(cold)*dy(s))*(1.0-phiplot))
+int1d(Th,1,2,4,5)(0.5*c*(ux*N.x+uy*N.y)*s*phiplot)
+int1d(Th,1,2,4,5)(0.5*cold*(ux*N.x+uy*N.y)*s*phiplot)
+int1d(Th,1,2,4,5)(0.5*c*(qx*N.x+qy*N.y)*s*(1-phiplot))
+int1d(Th,1,2,4,5)(0.5*cold*(qx*N.x+qy*N.y)*s*(1-phiplot))
//+int2d(Th)(hTriangle/(2.0)*residual*(dx(c)*dx(s)+dy(c)*dy(s)))
//-int2d(Th)(rmax*c/(cold+cmm)*s*(1.0-phiplot))
//-int2d(Th)(rmax*c/(cold+cmm)*creac*s*(1-phiplot))
+on(3, c=cfIn);
*/

problem transport(c,s) = 
int2d(Th)(1.0/dt*c*s)
-int2d(Th)(convect([ux,uy], -dt, cold)/dt*s*phiplot)
-int2d(Th)(convect([qx,qy], -dt, cold)/dt*s*(1-phiplot))
+int2d(Th)(diffF*(dx(c)*dx(s)+dy(c)*dy(s))*phiplot)
+int2d(Th)(diffP*(dx(c)*dx(s)+dy(c)*dy(s))*(1.0-phiplot))
-int2d(Th)(rmax*cold/(cold+cmm)*creac*s*(1-phiplot))
+on(6, c=cfIn)
+on(3, c=0);


	string fluid=files+"stokes30.vtk";
	string darcy=files+"darcy30.vtk";

	 int nv,nt,pom;
	 real tx,ty,tz;
	 int v1,v2,v3,v4,v5;
	 string aux;

	 ifstream fiif(fluid);
	 ifstream fiiS(darcy);

	 int nvS,ntS;
	
	 fiiS >> aux >> aux >> aux>> aux >> aux;
	 fiiS >> aux >> aux;
	 fiiS >> aux;
	 fiiS >> aux >> aux;
	 fiiS >> aux>> nvS >> aux; 
	 	
	
	for (int k=0; k<nvS; k++) { 
		fiiS >>tx>>ty>>tz;
	}
		
	fiiS >> aux>> ntS >> aux; 
	
	//cout<<nvS<<"  "<<ntS<<endl;
	//cout<<Th.nv<<"  "<<Th.nt<<endl;
		 
	for (int k=0; k<ntS; k++) { 
		fiiS >>v1>>v2>>v3>>v4;
	}
		
	fiiS >> aux>> pom; 
		 
	for (int k=0; k<pom; k++) { 
		fiiS >>v1;
	}
		
	fiiS >> aux>> pom; 
	fiiS >> aux >> aux >> aux>> pom; 
	fiiS >> aux>> aux;	
		 
	 for (int k=0; k<nvS; k++) { 
		fiiS >>pp[][k];
	}
					
	fiiS >> aux >> aux >> aux; 
			
	for (int k=0; k<nvS; k++) { 
		fiiS >>qx[][k]>>qy[][k]>>aux;
	}

	 fiif >> aux >> aux >> aux>> aux >> aux;
	 fiif >> aux >> aux;
	 fiif >> aux;
	 fiif >> aux >> aux;
	 fiif >> aux>> nvS >> aux; 
	 	
	
	for (int k=0; k<nvS; k++) { 
		fiif >>tx>>ty>>tz;
	}
		
	fiif >> aux>> ntS >> aux; 
		 
	for (int k=0; k<ntS; k++) { 
		fiif >>v1>>v2>>v3>>v4;
	}
		
	fiif >> aux>> pom; 
		 
	for (int k=0; k<pom; k++) { 
		fiif >>v1;
	}
		
	fiif >> aux>> pom; 
	fiif >> aux >> aux >> aux>> pom; 
	fiif >> aux>> aux;	
		 
	 for (int k=0; k<nvS; k++) { 
		fiif >>p[][k];
	}
					
	fiif >> aux >> aux >> aux; 
			
	for (int k=0; k<nvS; k++) { 
		fiif >>ux[][k]>>uy[][k]>>aux;
	}


//time loop starts here
t=0;

for (int j=0;j<=NN;++j)
{

	t=t+dt;
	
	cold=c;
	cproj=c;
	creac[]=heavyside(cproj[],ccr,Th.nv);
//	[plotux,plotuy]=[ux,uy];
//	postproc2D(creac[],plotux[],Th,where+"creac"+string(j)+".vtk");
	transport;
	
	if(j%pr==0){
		
		pplot=c;
		[plotux,plotuy]=[qx,qy];
		postproc2D(pplot[],plotux[],Th,where+"concentration"+string(br)+".vtk");
		
		br=br+1;
	}

}
