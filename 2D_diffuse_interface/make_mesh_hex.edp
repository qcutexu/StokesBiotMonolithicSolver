include "SaveVTK2d.edp";
include "definePhiHex.edp";
string input="./input/";

/*
//STEP 1: make course mesh
//______________________________
int nL=90;
int nH=50;
real H=levelm1+chan;
real Hin=0.1;

int n1=6, n2=10;

mesh Th1=square(nL,nH,[totalL*x,-chan+H*y]);   
mesh ThPomL=square(n1,n2,[totalL/3-InL/2.0+InL*x,level3-chan-OutL+OutL*y]);  
mesh ThPomR=square(n1,n2,[2*totalL/3-InL/2.0+InL*x,level3-chan-OutL+OutL*y]);  
mesh Th=Th1+ThPomL+ThPomR;
//plot(Th,wait=1);
//______________________________
*/

mesh ThF=readmesh("HexMesh.am_fmt");
//real scale = 0.3/11.4; 
//real shift = (totalL-(70+2*R)*scale)/2.0;
//ThF=movemesh(ThF, [scale*x+0.168,scale*y+0.3]);

fespace Sh(ThF,P1);
Sh xx=x, yy=y;

real scaleX=abs(xx[].max)+abs(xx[].min);
real scaleY=abs(yy[].max)+abs(yy[].min);
real scale=level0/scaleY;

//cout<<scaleX<<"  "<<xx[].min<<"  "<<totalL<<endl;

ThF=movemesh(ThF, [x*scale-(-1)^sign(xx[].min)*abs(xx[].min)*scale+(totalL-scaleX*scale)/2.0,y*scale-(-1)^sign(yy[].min)*abs(yy[].min)*scale+level3]);

//plot(ThF,Th, wait=1);

//real area=int2d(ThF)(1.0);
//cout<<area<<endl;


//STEP 2 & 3: read new mesh
//...............................
//mesh Th=readmesh(input+"mesh_fine_hex.am_fmt"); // Step 2
mesh Th=readmesh(input+"mesh_final_hex.am_fmt"); // Step 3
//...............................


// FE SPACES
fespace Pph(Th,P1);
Pph phiplot,phiF,phiFold,zeta;

fespace PlotFh(Th,[P1,P1]);  
PlotFh [plotux,plotuy];

// FE SPACES
fespace PFph(ThF,P1);
PFph phiFplot;

fespace PlotFFh(ThF,[P1,P1]);  
PlotFFh [plotFux,plotFuy];


fespace PwcF(Th,P0);
PwcF hhhhF=hTriangle;
real hminF=hhhhF[].min;
real hdirF=hminF;

real eps=hdirF;  
real delta=1e-3;

string where="./paraview/";

/*
//STEP 1: adapt and save mesh
//______________________________
phiplot=0;
for(int i=0; i<Th.nv; i++){
	for(int j=0; j<ThF.nv; j++){
		if(abs(Th(i).x-ThF(j).x)<4e-3 && abs(Th(i).y-ThF(j).y)<4e-3){
			phiplot[][i]=1;
			}
		}
	if (Th(i).y>level0) phiplot[][i]=1;
	else if (Th(i).y<level3) phiplot[][i]=1;
	}

	
[plotux,plotuy]=[dx(phiplot),dy(phiplot)];
postproc2D(phiplot[],plotux[],Th,where+"phiC.vtk");

Th=adaptmesh(Th,sqrt(dx(phiplot)^2+dy(phiplot)^2),nbvx=250000,hmin=0.002,hmax=0.02,splitin2=true);

savemesh(Th,input+"mesh_fine_hex.am_fmt");


phiplot=0;
for(int i=0; i<Th.nv; i++){
	for(int j=0; j<ThF.nv; j++){
		if(abs(Th(i).x-ThF(j).x)<4e-3 && abs(Th(i).y-ThF(j).y)<4e-3){
			phiplot[][i]=1;
			}
		}
	if (Th(i).y>level0) phiplot[][i]=1;
	else if (Th(i).y<level3) phiplot[][i]=1;
	}


//phiF=phiplot;
postproc2D(phiplot[],plotux[],Th,where+"phiAdapt.vtk");

	ofstream file(input+"pffInitial.txt", append);
	file<<	Th.nv <<endl;
	for(int j=0; j<Th.nv; j++){
		file<<	phiplot[][j] <<endl;
	}
//________________________________
*/
/*
//STEP 2: Allen-Cahn
//...............................

real T=2e-2;
real dt=2e-3, t=0;
real NN=5; //Tac/dtac;

real diff=0.01;     

problem AllenCahn(phiF,zeta)=
int2d(Th)(1.0/dt*phiF*zeta)
-int2d(Th)(1.0/dt*phiFold*zeta)
+int2d(Th)(diff^2*(dx(phiF)*dx(zeta)+dy(phiF)*dy(zeta)))
+int2d(Th)(0.5*phiF*(phiFold^2-1.0)*zeta)
+int2d(Th)(0.5*phiFold*(phiFold^2-1.0)*zeta);

//cout<<Th.nv<<endl;
//cout<<phiFold[].n<<endl;

{
	ifstream file1(input+"pffInitial.txt");   
	file1 >> phiFold[];
}

t=0;
for (int k=1;k<=NN;++k)
{

	t=t+dt;
			
	AllenCahn;

	phiFold=phiF;
	
	postproc2D(phiF[],plotux[],Th,where+"phiF"+string(k)+".vtk");
//	plot(phiFE,wait=1);

	ofstream file(input+"pff"+string(k)+".txt", append);
	file<<	Th.nv <<endl;
	for(int j=0; j<Th.nv; j++){
		file<<	phiF[][j] <<endl;
	}
	

}

Th=adaptmesh(Th,sqrt(dx(phiF)^2+dy(phiF)^2),nbvx=250000,hmin=0.002,hmax=0.02,splitin2=true);

savemesh(Th,input+"mesh_final_hex.am_fmt");

hminF=hhhhF[].min;
hdirF=hminF;

eps=hdirF; 

phiFold=0;
for(int i=0; i<Th.nv; i++){
	for(int j=0; j<ThF.nv; j++){
		if(abs(Th(i).x-ThF(j).x)<3.85e-3 && abs(Th(i).y-ThF(j).y)<3.85e-3){
			phiFold[][i]=1;
			}
		}
	if (Th(i).y>level0) phiFold[][i]=1;
	else if (Th(i).y<level3) phiFold[][i]=1;
	}


t=0;
for (int k=1;k<=NN;++k)
{

	t=t+dt;
			
	AllenCahn;

	phiFold=phiF;
	
	postproc2D(phiF[],plotux[],Th,where+"phiF"+string(k+NN)+".vtk");
//	plot(phiFE,wait=1);
	

}

for(int k=0; k<Th.nv; k++){
	if(phiF[][k]>1) phiF[][k]=1;
	else if(phiF[][k]<0) phiF[][k]=0;
}

	ofstream file(input+"pffFinal.txt", append);
	file<<	Th.nv <<endl;
	for(int j=0; j<Th.nv; j++){
		file<<	phiF[][j] <<endl;
	}


//[plotux,plotuy]=[dx(phiplot),dy(phiplot)];
postproc2D(phiF[],plotux[],Th,where+"phiFinal.vtk");

	real area=int2d(Th)(phiF);
	cout<<area<<endl;

//...............................
*/

//STEP 3: redefine labels 
//vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

int[int] labels(Th.nv);
labels=0;
for (int i=0; i<Th.nv; i++){
	if(abs(Th(i).y-levelm1)<1e-4){
		if(Th(i).x>=totalL/4-totalL/8 && Th(i).x<=totalL/4+totalL/8){
			labels[i]=6;	
			}
		else if(Th(i).x>=3*totalL/4-totalL/8 && Th(i).x<=3*totalL/4+totalL/8){
			labels[i]=6;		
		}
		else labels[i]=3;
	}
	else if(abs(Th(i).x)<1e-4) labels[i]=4;
	else if(abs(Th(i).x-totalL)<1e-4) labels[i]=2;
	else if(abs(Th(i).y+chan)<1e-4) labels[i]=1;
	else if(abs(Th(i).y-level3+chan+OutL)<1e-4) labels[i]=5;
	else if(abs(Th(i).x-2*totalL/3+InL/2.0)<1e-4) labels[i]=1;
	else if(abs(Th(i).x-totalL/3+InL/2.0)<1e-4) labels[i]=1;
	else if(abs(Th(i).x-2*totalL/3-InL/2.0)<1e-4) labels[i]=1;
	else if(abs(Th(i).x-totalL/3-InL/2.0)<1e-4) labels[i]=1;
}

int[int] labelsT(Th.nt);
labelsT=0;

ofstream fout(input+"labelsTransport");
fout << labels <<endl;
//vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

/*
//STEP 4: save mesh
//ooooooooooooooooooooooooooooooooooooooo
string aux;
int nv=Th.nv, nt=Th.nt;

ofstream outF(input+"mesh_final_hex.am_fmt");

outF << nv << "    " << nt << endl;

for (int k=0; k<nt; k++) { 
	outF <<Th[k][0]<< "\t\t"<< Th[k][1]<<"\t\t"<<Th[k][2]<<endl;
}
for (int k=0; k<nv; k++) { 
	outF <<Th(k).x<< "\t\t"<< Th(k).y <<endl; 
}
int l=0;
for (int k=0; k<nt/10; k++) { 
	outF <<labelsT[l]<<" "<<labelsT[l+1]<<" "<<labelsT[l+2]<<" "<<labelsT[l+3]<<" "<<labelsT[l+4]<<" "<<labelsT[l+5]<<" "<<labelsT[l+6]<<" "<<labelsT[l+7]<<" "<<labelsT[l+8]<<" "<<labelsT[l+9]<<" " <<endl; 
	l=l+10;
}
for (int k=l; k<nt; k++) { 
	outF <<labelsT[k]<<" "; 
}
outF <<endl; 
	
l=0;
for (int k=0; k<nv/10; k++) { 
	outF <<labels[l]<<" "<<labels[l+1]<<" "<<labels[l+2]<<" "<<labels[l+3]<<" "<<labels[l+4]<<" "<<labels[l+5]<<" "<<labels[l+6]<<" "<<labels[l+7]<<" "<<labels[l+8]<<" "<<labels[l+9]<<" " <<endl; 
	l=l+10;
}
for (int k=l; k<nv; k++) { 
	outF <<labels[k]<<" "; 
}
*/
