//verbosity = 0;
macro cdot(ax,ay,bx,by) (ax*bx+ay*by)//
macro div(ax,ay) (dx(ax)+dy(ay))//
macro sym(u1,u2,v1,v2) ( dx(u1)*dx(v1) + 0.5*(dx(u2)+dy(u1))*(dx(v2)+dy(v1)) + dy(u2)*dy(v2))//
macro gugv(u1,u2,v1,v2) ( dx(u1)*dx(v1) + dy(u1)*dy(v1)+dx(u2)*dx(v2) + dy(u2)*dy(v2))//

include "SaveVTK2d.edp";
include "definePhiStraight.edp";
//load "MUMPS_FreeFem"
//export TMPDIR=/tmp

mesh Th=readmesh("./input/mesh_final_straight.am_fmt");  //course mesh


// FE SPACES
fespace Fh(Th,[P1b,P1b,P1]);  
fespace Ph(Th,P1);
Fh [ux,uy,p],[vx,vy,q],[uxold,uyold,pold];   
Ph pplot;
Ph c, s, cold, diff, tang, creac;

fespace Sh(Th,[P1,P1]);  
Sh [etax,etay],[etaxold,etayold],[zetax,zetay];
Sh [xix,xiy],[xixold,xiyold];


fespace PlotFh(Th,[P1,P1]);  
PlotFh [plotux,plotuy], [plotex,plotey];

fespace Pph(Th,P1);  
Pph pp, psip, ppold;

//fespace Pph(Th,P1);  
Pph pDplot;
Pph qx,qy,phiplot,phiold, uxtot, uytot, ptot, rx, ry;

fespace Dplot(Th,[P1,P1]);  
Dplot [plotqx,plotqy];


// fluid parameters
func rhoF=1;
func muF=0.04;

//structure parameters
real rhoS = 1.2;
real E=2.5e+5;
real sigma=0.49;
real muS=E/(2.0*(1+sigma)); 
real lambdaS= 2.0*muS*sigma/(1.0-2.0*sigma); 
real spring=1e+6;

// darcy parameters
real c0 = 1e-7; 
real permeab=1e-5;  
real alpha=1.0; 
real gammafp =1e+3;  

real T=5;
real dt=1e-3, t=0;
real NN=T/dt;
int br=1, pr=50; //15;

real penalty=1e+10;

real vIn=3.5;
real cfIn=2e-7, diffF=3e-5, diffP=1.3e-5;
real rmax=-3.4e-8, cmm=1e-9, ccr=1e-10;

real pin=200, pout=0; //pin=61328.3, pout=26664.5;

fespace PwcF(Th,P0);
PwcF hhhhF=hTriangle;
real hminF=hhhhF[].min;
real hdirF=hminF;

real eps=hdirF;  //0.2;
//cout<<eps<<endl;
real delta=5e-3;

string where="./straightFlow/";


func real[int] heavyside(real[int] c1, real c2, int size){
	real[int] HS(size);
	for(int i=0; i<size; i++){
		if(c1[i]>c2){
			HS[i]=1;
			}
		else HS[i]=0;
	}
	return HS;
}


{
	ifstream file1("./input/pffFinal.txt");   
	file1 >> phiplot[];
}
//	real area=int2d(Th)(phiplot);
//	cout<<area<<endl;
// 0.192023
// 0.192077
// 0.192021
	
postproc2D(phiplot[],plotux[],Th,where+"phi.vtk");

real normPhi = sqrt(int2d(Th)(dx(phiplot)^2+dy(phiplot)^2));

diff=diffF*phi(x,y,eps)+diffP*(1.0-phi(x,y,eps));

phiold=phiplot;
phiplot=(1.0-2*delta)*phiold+delta;


varf Fluid([ux,uy,p],[vx,vy,q])=
	int2d(Th)(rhoF/dt*cdot(ux,uy,vx,vy)*phiplot)
	+int2d(Th)(2*muF*sym(ux,uy,vx,vy)*phiplot)
	-int2d(Th)(p*div(vx,vy)*phiplot)
	+int2d(Th)(q*div(ux,uy)*phiplot)	
	+int2d(Th)(gammafp/normPhi*(-ux*dy(phiplot)+uy*dx(phiplot))*(-vx*dy(phiplot)+vy*dx(phiplot)))
	+int1d(Th,5)(penalty*ux*vx*phiplot)
	+on(1,2,4, ux=0, uy=0)
	+on(3, uy=vIn*inlet(x,y), ux=0);
matrix FF = Fluid(Fh,Fh);

		
varf FluidDarcy([pp],[vx,vy,q])=
	-int2d(Th)(pp*(vx*dx(phiplot)+vy*dy(phiplot)));
matrix FQ = FluidDarcy(Pph,Fh);


varf FluidStructure([xix,xiy],[vx,vy,q])=
	-int2d(Th)(gammafp/normPhi*(-xix*dy(phiplot)+xiy*dx(phiplot))*(-vx*dy(phiplot)+vy*dx(phiplot)));
matrix FS = FluidStructure(Sh,Fh);


varf Structure([xix,xiy],[zetax,zetay])=
	int2d(Th)(rhoS/dt*(xix*zetax+xiy*zetay)*(1-phiplot)) 
	+int2d(Th)(2*muS*dt*sym(xix,xiy,zetax,zetay)*(1-phiplot))
	+int2d(Th)(lambdaS*dt*div(xix,xiy)*div(zetax,zetay)*(1-phiplot))
	+int2d(Th)(spring*dt*(xix*zetax+xiy*zetay)*(1-phiplot)) 
	+int2d(Th)(gammafp/normPhi*(-xix*dy(phiplot)+xiy*dx(phiplot))*(-zetax*dy(phiplot)+zetay*dx(phiplot)))
	+on(2,4,xix=0,xiy=0);
	matrix SS = Structure(Sh,Sh);
	
	
varf StructureFluid([ux,uy,p],[zetax,zetay])=	
	-int2d(Th)(gammafp/normPhi*(-ux*dy(phiplot)+uy*dx(phiplot))*(-zetax*dy(phiplot)+zetay*dx(phiplot)));
matrix SF = StructureFluid(Fh,Sh);


varf StructureDarcy([pp],[zetax,zetay])=
	-int2d(Th)(alpha*pp*div(zetax,zetay)*(1-phiplot))
	+int2d(Th)(pp*(zetax*dx(phiplot)+zetay*dy(phiplot)));
matrix SQ = StructureDarcy(Pph,Sh);


varf DPressure([pp],[psip])=
	int2d(Th)((c0/dt)*pp*psip*(1-phiplot))
	+int2d(Th)(permeab*(dx(pp)*dx(psip)+dy(pp)*dy(psip))*(1-phiplot));
//	+on(1,pp=0);

matrix QQ = DPressure(Pph,Pph);
	
varf DarcyFluid([ux,uy,p],[psip])=
	int2d(Th)(psip*(ux*dx(phiplot)+uy*dy(phiplot)));
	
	matrix QF = DarcyFluid(Fh,Pph);
	

varf DarcyStructure([xix,xiy],[psip])=
	int2d(Th)(alpha*psip*div(xix,xiy)*(1-phiplot))
	-int2d(Th)(psip*(xix*dx(phiplot)+xiy*dy(phiplot)));

	matrix QS = DarcyStructure(Sh,Pph);

	
//Fluid RHS
varf FluidIn([ux,uy,p],[vx,vy,q]) =
int2d(Th)(rhoF/dt*cdot(uxold,uyold,vx,vy)*phiplot)
//+int1d(Th,3)(pin*cdot(N.x,N.y,vx,vy)*phiplot)
//+int1d(Th,1)(pout*cdot(N.x,N.y,vx,vy)*phiplot)
	+on(1,2,4, ux=0, uy=0)
	+on(3, uy=vIn*inlet(x,y), ux=0);


varf fl(unused,Fh)=FluidIn;

//Structure RHS
varf StructureIn([xix,xiy],[zetax,zetay]) =
int2d(Th)(rhoS/dt*(xixold*zetax+xiyold*zetay)*(1-phiplot))
-int2d(Th)(2*muS*sym(etaxold,etayold,zetax,zetay)*(1-phiplot))
-int2d(Th)(lambdaS*div(etaxold,etayold)*div(zetax,zetay)*(1-phiplot))
-int2d(Th)(spring*(etaxold*zetax+etayold*zetay)*(1-phiplot))
+on(2,4,xix=0,xiy=0);

varf sl(unused,Sh)=StructureIn;

//Fluid RHS
varf DarcyIn([pp],[psip]) =
int2d(Th)((c0/dt)*ppold*psip*(1-phiplot));
//	+on(3,pp=pin*(1-phiplot))
//	+on(1,pp=0);
//	+on(2,4,pp=0)
	//+on(3,pp=pin*(1-phiplot));
//	+on(1,pp=-pout*(1-phiplot));

varf dl(unused,Pph)=DarcyIn;


problem Darcy([qx,qy],[rx,ry])=
int2d(Th)(qx*rx+qy*ry)
+int2d(Th)(permeab*(dx(pp)*rx+dy(pp)*ry));




problem transport(c,s) = 
int2d(Th)(1.0/dt*c*s)
-int2d(Th)(1.0/dt*cold*s)
-int2d(Th)(c*(ux*dx(s)+uy*dy(s))*phiplot)
-int2d(Th)(c*(qx*dx(s)+qy*dy(s))*(1-phiplot))
+int2d(Th)(diff*(dx(c)*dx(s)+dy(c)*dy(s)))
+int1d(Th,1,2,4,5)(c*(ux*N.x+uy*N.y)*s*phiplot)
+int1d(Th,1,2,4,5)(c*(qx*N.x+qy*N.y)*s*(1-phiplot))
-int2d(Th)(rmax*c/(cold+cmm)*creac*s*(1-phiplot))
+on(3, c=cfIn*inletc(x,y));
//

matrix	mono=[
		[ FF, FQ, FS],
		[ QF, QQ, QS],
		[ SF, SQ, SS]
	];

///////////////////////////////////////////////////////////////////
//vector of RHS
real[int] xxf(FF.n),bf(FF.n),bbf(FF.n),bowlf(FF.n);
real[int] xxq(QQ.n),bq(QQ.n),bbq(QQ.n),bowlq(QQ.n);
real[int] xxs(SS.n),bs(SS.n),bbs(SS.n),bowls(SS.n);
real[int] xx=[xxf,xxq,xxs];




set(SS,solver=UMFPACK);
set(QQ,solver=UMFPACK);
set(FF,solver=UMFPACK);

func real[int] PP(real[int] & rr)
{
	real[int] xpre = rr;
	[bf,bq,bs]=xpre;

	xxs=SS^-1 * bs;

	bbq=bq;
	bowlq=QS*xxs;
	bbq-=bowlq;
	xxq=QQ^-1 * bq;

	bbf=bf;
	bowlf=FQ*xxq;
	bbf-=bowlf;
	bowlf=FS*xxs;
	bbf-=bowlf;
	xxf=FF^-1 * bf;

	xpre=[xxf,xxq,xxs];

	//xpre = D^-1*rr;
	return xpre;
}

t=0;



for (int k=0;k<=NN;++k)
{

	t=t+dt;
	
	[etaxold,etayold]=[etax,etay];
	[xixold,xiyold]=[xix,xiy];
	[uxold,uyold,pold]=[ux,uy,p];
	ppold=pp;
	cold=c;
				
	//monolithic;
	//set(mono, solver=GMRES,precon=PP);
	set(mono, solver=sparsesolver);
	real[int] FinVec=fl(0,Fh);
	real[int] SinVec=sl(0,Sh);
	real[int] DinVec=dl(0,Pph);

	real[int] b=[FinVec,DinVec,SinVec];

	xx = mono^-1 * b;
	[xxf,xxq,xxs]=xx;

	ux[]=xxf;
	pp[]=xxq;
	xix[]=xxs;

	[etax,etay]=dt*[xix,xiy]+[etaxold,etayold];	
				
	Darcy;

	uxtot=phiplot*ux+(1-phiplot)*qx;
	uytot=phiplot*uy+(1-phiplot)*qy;
	ptot=phiplot*p+(1-phiplot)*pp;
	
//	creac[]=heavyside(c[],ccr,Th.nv);
	//[plotux,plotuy]=[uxtot,uytot];
	//postproc2D(creac[],plotux[],Th,where+"creac"+string(k)+".vtk");
//	transport;
	
	if(k%pr==0){
				
		[plotux,plotuy]=[uxtot,uytot];
		postproc2D(ptot[],plotux[],Th,where+"total"+string(br)+".vtk");
		
		pplot=p*phiplot;
		[plotux,plotuy]=[ux*phiplot,uy*phiplot];
		postproc2D(pplot[],plotux[],Th,where+"stokes"+string(br)+".vtk");
		
		pplot=pp*(1-phiplot);				
		[plotux,plotuy]=[qx*(1-phiplot),qy*(1-phiplot)];
		postproc2D(pplot[],plotux[],Th,where+"darcy"+string(br)+".vtk");
		
		pplot=pp*(1-phiplot);				
		[plotex,plotey]=[etax*(1-phiplot),etay*(1-phiplot)];
		postproc2D(pplot[],plotex[],Th,where+"displ"+string(br)+".vtk");
		
//		pplot=c;
//		[plotux,plotuy]=[uxtot,uytot];
//		postproc2D(pplot[],plotux[],Th,where+"concentration"+string(br)+".vtk");
		
		br=br+1;
	}

}
